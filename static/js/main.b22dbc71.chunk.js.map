{"version":3,"sources":["Images/Welcome.svg","Components/Main.js","Components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","props","startQuiz","setState","state","this","to","className","src","WelcomeImg","id","onClick","Component","correctAnswersArray","entities","Quiz","startGame","axios","get","then","response","i","data","results","length","push","correct_answer","videoGameData","show","modalDialog","onSubmit","e","inputList","document","getElementsByTagName","tempArr","type","checked","value","tempResult","clientAnswers","result","returnMain","return","correctAnswer","allAnswerss","UserAnsw","console","log","map","gameData","index","indexOf","allAnswers","incorrect_answers","shuffledAnswers","array","min","max","shuffle","rnd","Math","floor","random","tempStr","shuffleArray","key","question","replace","match","answer","style","display","name","required","Modal","backdrop","onHide","Header","closeButton","Body","Footer","App","path","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b22dbc71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Welcome.d5e54d45.svg\";","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport WelcomeImg from '../Images/Welcome.svg';\r\nimport '../Css/Main.css';\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      startQuiz: false,\r\n    }\r\n}\r\n\r\n  startQuiz = () => {\r\n    this.setState({\r\n      startQuiz: true,\r\n  })\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.state.startQuiz ? <Redirect to='/Quiz' /> : null}\r\n        <div className='containerMain'>\r\n          <img src={WelcomeImg} />\r\n          <div className='title'>\r\n            <h1 className='to'> to</h1>\r\n            <h1 className='my'> my</h1>\r\n            <h1 className='quiz'> Quiz</h1>\r\n            <h1 className='game'> game</h1>\r\n          </div>\r\n          <button id='startQuiz' onClick={this.startQuiz}>Start Quiz</button>\r\n        </div>\r\n      </>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Main","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Modal } from 'react-bootstrap'\r\nimport axios from 'axios';\r\nimport '../Css/Quiz.css';\r\nimport '../Css/RadioButton.css';\r\nimport '../Css/Modal.css';\r\n\r\nlet setAnswers = true;\r\nlet correctAnswersArray = [];\r\nconst entities = {\r\n  '&#039;': \"'\",\r\n  '&quot;': '\"',\r\n  '&ldquo;': '\"',\r\n  '&rdquo;': '\"',\r\n  '&rsquo;': \"'\",\r\n  '&lrm;': \"\",\r\n  \"&ntilde;\": \"ñ\",\r\n  \"&eacute;\": \"é\",\r\n  \"&amp;\": \"&\" ,\r\n  \"&uuml;\": \"ü\"\r\n}\r\n\r\nclass Quiz extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      videoGameData: [],\r\n      correctAnswer: [],\r\n      result: [],\r\n      allAnswerss: [],\r\n      UserAnsw: [],\r\n      clientAnswers: [],\r\n      return: false,\r\n      show: false,\r\n  };\r\n}\r\n\r\n  componentDidMount() {\r\n    let url = 'https://opentdb.com/api.php?amount=10&category=15&difficulty=easy&type=multiple';\r\n    axios.get(url)\r\n      .then((response) => {\r\n        for (let i = 0; i < response.data.results.length; i++) {\r\n          correctAnswersArray.push(response.data.results[i].correct_answer);\r\n        }\r\n        this.setState({\r\n          videoGameData: response.data.results,\r\n      });\r\n   });\r\n}\r\n\r\n  startGame = () => {\r\n    correctAnswersArray = [];\r\n    let url = 'https://opentdb.com/api.php?amount=10&category=15&difficulty=easy&type=multiple';\r\n    axios.get(url)\r\n      .then((response) => {\r\n        for (let i = 0; i < response.data.results.length; i++) {\r\n          correctAnswersArray.push(response.data.results[i].correct_answer);\r\n        }\r\n        this.setState({\r\n          videoGameData: response.data.results,\r\n          show: !this.state.show\r\n      });\r\n  });\r\n}\r\n\r\n  modalDialog = () => {\r\n    this.setState({\r\n      show: !this.state.show,\r\n  })\r\n}\r\n\r\n  onSubmit = (e) => {\r\n    let inputList = document.getElementsByTagName('input');\r\n    let tempArr = [];\r\n    for(let i = 0; i < inputList.length; i++) {\r\n      if(inputList[i].type='radio') {\r\n        if(inputList[i].checked){\r\n          tempArr.push(inputList[i].value);\r\n        }\r\n      }\r\n    }\r\n\r\n    let tempResult = [];\r\n    for(let i = 0; i < tempArr.length; i++) {\r\n      if(correctAnswersArray[i] === tempArr[i] ) {\r\n        tempResult.push(1);\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      clientAnswers: tempArr,\r\n      result: tempResult, \r\n      show: !this.state.show,\r\n  });\r\n}\r\n\r\n  returnMain = () => {\r\n    this.setState({\r\n      return: true,\r\n  })\r\n}\r\n\r\n  render() {\r\n    setAnswers = false;\r\n    const {videoGameData} = this.state;\r\n\r\n    function getRandomArbitrary(min, max) {\r\n      return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    function shuffleArray(array) {\r\n      let shuffle = [...array];\r\n      for (let i = 0; i < shuffle.length; i++) {\r\n        let rnd = getRandomArbitrary(i, shuffle.length);\r\n        let tempStr = shuffle[rnd];\r\n        shuffle[rnd] = shuffle[i];\r\n        shuffle[i] = tempStr;\r\n      }\r\n      return shuffle;\r\n    }\r\n    console.log(correctAnswersArray);\r\n    console.log('Client answers:' + this.state.clientAnswers);\r\n    console.log('Resultat:'  + this.state.result);\r\n    return (\r\n      <>\r\n        {this.state.return ? <Redirect to='/' /> : null}\r\n        <header>\r\n          <h5 className='titleQuiz'>Quiz game</h5>\r\n        </header>\r\n        <div className='shadowsforall'>\r\n          {videoGameData.map(gameData => {\r\n            let index = videoGameData.indexOf(gameData);\r\n            let allAnswers = [];\r\n            allAnswers.push(gameData.correct_answer);\r\n            for(let i = 0; i < gameData.incorrect_answers.length; i++) {\r\n              allAnswers.push(gameData.incorrect_answers[i]);\r\n            }\r\n            let shuffledAnswers = shuffleArray(allAnswers);\r\n\r\n            return( \r\n              <div className='containerall' key={gameData.question}>\r\n                <p className='text'>{gameData.question.replace(/&#?\\w+;/g, match => entities[match])}</p>\r\n                {shuffledAnswers.map((answer)=> {\r\n                  return(\r\n                    <div key={answer}>\r\n                      <label style={{display: 'flex'}} >\r\n                        <input className='input' type='radio' name={index} id={answer} value={answer} required/>\r\n                        <h5 className='text'>{answer.replace(/&#?\\w+;/g, match => entities[match])}</h5>\r\n                      </label>\r\n                    </div>\r\n                    );\r\n                  })}\r\n              </div>\r\n            );\r\n        })}\r\n  \r\n        <footer>\r\n          <button id='BtnsubmitQuiz' onClick={()=> {this.onSubmit()}}>Submit Answers</button>\r\n          <Modal backdrop='static' show={this.state.show} onHide={()=>this.onSubmit()} >\r\n            <Modal.Header className='modalContainer' closeButton>Quiz game</Modal.Header>\r\n            <Modal.Body className='modalContainer'>\r\n              <h1 className='congratsMsg'>Congratulations!</h1>\r\n              <p className='correctAnswerMsg'>You answered  {this.state.result.length} /10 questions correct!</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className='modalFooterContainer'>\r\n              <button id='buttonModal' type='submit' onClick={()=>{this.returnMain()}}>CLOSE</button>\r\n              <button id='buttonModal' type='submit' onClick={()=>{this.startGame()}}>RE-START</button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        </footer>\r\n      </div>\r\n    </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Quiz","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Main from './Components/Main.js';\nimport Quiz from './Components/Quiz.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\"></header>\n        <main>\n          <Route path='/' exact><Main /></Route>\n          <Route path='/Quiz'><Quiz /></Route>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}